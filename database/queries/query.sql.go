// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createJob = `-- name: CreateJob :one
INSERT INTO jobs (id, job_type, payload)
VALUES ($1, $2, $3)
RETURNING id, job_type, status, payload, result, retry_count, started_at, completed_at, created_at, updated_at, created_by, locked_by, version
`

type CreateJobParams struct {
	ID      pgtype.UUID
	JobType string
	Payload []byte
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (Job, error) {
	row := q.db.QueryRow(ctx, createJob, arg.ID, arg.JobType, arg.Payload)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.JobType,
		&i.Status,
		&i.Payload,
		&i.Result,
		&i.RetryCount,
		&i.StartedAt,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.LockedBy,
		&i.Version,
	)
	return i, err
}

const getJobByID = `-- name: GetJobByID :one
SELECT id, job_type, status, payload, result, retry_count, started_at, completed_at, created_at, updated_at, created_by, locked_by, version FROM jobs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetJobByID(ctx context.Context, id pgtype.UUID) (Job, error) {
	row := q.db.QueryRow(ctx, getJobByID, id)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.JobType,
		&i.Status,
		&i.Payload,
		&i.Result,
		&i.RetryCount,
		&i.StartedAt,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.LockedBy,
		&i.Version,
	)
	return i, err
}

const getJobsByStatus = `-- name: GetJobsByStatus :many
SELECT id, job_type, status, payload, result, retry_count, started_at, completed_at, created_at, updated_at, created_by, locked_by, version FROM jobs
WHERE status = $1
ORDER BY created_at DESC
`

func (q *Queries) GetJobsByStatus(ctx context.Context, status JobStatus) ([]Job, error) {
	rows, err := q.db.Query(ctx, getJobsByStatus, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.JobType,
			&i.Status,
			&i.Payload,
			&i.Result,
			&i.RetryCount,
			&i.StartedAt,
			&i.CompletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.LockedBy,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
